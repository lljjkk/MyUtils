package octopus.utils;import groovy.lang.Binding;import groovy.lang.Closure;import groovy.lang.GroovyShell;import java.lang.reflect.Field;import java.util.Map;public class SnippetRunner extends GroovyShell {	private Object snippetDelegate = null;	public int dataIndex = -1;	public SnippetRunner(Object delegate) {		super();		this.snippetDelegate = delegate;	}	public void snippetImport(Object obj) {		snippetImport(getContext(), obj);	}	public void setVar(String varName, Object varValue) {		getContext().setVariable(varName, varValue);	}	public Object runSnippet(String snippet) {		return runSnippet(this, snippetDelegate, snippet, null);	}	public Object runSnippet(String snippet, Map<String, ?> params) {		return runSnippet(this, snippetDelegate, snippet, params);	}	public String expandString(String src) {		return (String) evaluate("(\"" + StringList.toJavaString(src) + "\").toString()");	}	public String expandString(Object objImp, String src) {		snippetImport(objImp);		return expandString(src);	}	public WriteBack writeBack = null;	public boolean setCellBorder(String field, Boolean withBorder, Short colorIdx) {		if (writeBack != null) {			if (dataIndex >= 0) {				if (!writeBack.gotoIndex(dataIndex)) {					dataIndex = -1;					return false;				} else					dataIndex = -1;			}			return writeBack.setBorder(field, withBorder, colorIdx);		}		return false;	}	public boolean setCellBorder(int fieldIdx, Boolean withBorder, Short colorIdx) {		if (writeBack != null) {			if (dataIndex >= 0) {				if (!writeBack.gotoIndex(dataIndex)) {					dataIndex = -1;					return false;				} else					dataIndex = -1;			}			return writeBack.setBorder(fieldIdx, withBorder, colorIdx);		}		return false;	}	public boolean setFieldValue(int fieldIdx, String value) {		if (writeBack != null) {			if (dataIndex >= 0) {				if (!writeBack.gotoIndex(dataIndex)) {					dataIndex = -1;					return false;				} else					dataIndex = -1;			}			return writeBack.setFieldValue(fieldIdx, value);		}		return false;	}	public boolean setCellColor(String field, Short colorIdx) {		if (writeBack != null) {			if (dataIndex >= 0) {				if (!writeBack.gotoIndex(dataIndex)) {					dataIndex = -1;					return false;				} else					dataIndex = -1;			}			return writeBack.setCellColor(field, colorIdx);		}		return false;	}	public boolean setCellColor(int fieldIdx, Short colorIdx) {		if (writeBack != null) {			if (dataIndex >= 0) {				if (!writeBack.gotoIndex(dataIndex)) {					dataIndex = -1;					return false;				} else					dataIndex = -1;			}			return writeBack.setCellColor(fieldIdx, colorIdx);		}		return false;	}	public boolean setTextStyle(String field, Short colorIdx, Boolean bold, Boolean underline,			Boolean strikeOut) {		if (writeBack != null) {			if (dataIndex >= 0) {				if (!writeBack.gotoIndex(dataIndex)) {					dataIndex = -1;					return false;				} else					dataIndex = -1;			}			return writeBack.setTextStyle(field, colorIdx, bold, underline, strikeOut);		}		return false;	}	public boolean setTextStyle(int fieldIdx, Short colorIdx, Boolean bold, Boolean underline,			Boolean strikeOut) {		if (writeBack != null) {			if (dataIndex >= 0) {				if (!writeBack.gotoIndex(dataIndex)) {					dataIndex = -1;					return false;				} else					dataIndex = -1;			}			return writeBack.setTextStyle(fieldIdx, colorIdx, bold, underline, strikeOut);		}		return false;	}	public boolean setFieldValue(String field, String value) {		if (writeBack != null) {			if (dataIndex >= 0) {				if (!writeBack.gotoIndex(dataIndex)) {					dataIndex = -1;					return false;				} else					dataIndex = -1;			}			return writeBack.setFieldValue(field, value);		}		return false;	}	/***	 * Import static fields from a class	 * @param clazz	 */	public static void snippetImport(Binding snippetContext, Object obj) {		Class<?> clazz;		if (obj instanceof Class<?>)			clazz = (Class<?>) obj;		else			clazz = obj.getClass();		while (clazz != Object.class) {			Field[] fields = clazz.getDeclaredFields();			clazz = clazz.getSuperclass();			for (Field f : fields) {				try {					Object fieldValue;					if (clazz == obj)						fieldValue = f.get(null);					else						fieldValue = f.get(obj);					if (fieldValue instanceof String) {						snippetContext.setVariable(f.getName(), fieldValue);					}				} catch (IllegalArgumentException e) {				} catch (IllegalAccessException e) {				}			}		}	}	/***	 * This function is for executing normal expressions and scripts.	 * Although there's no obvious limitation on the size of the scripts,	 * we often tend to use this function to run scripts that's not very 	 * huge in size.	 * @param snippet	 * @param params	 * @return	 */	public static Object runSnippet(GroovyShell snippetShell, Object delegate, String snippet,			Map<String, ?> params) {		String __snippet = null;		if ((params != null) && (params.size() > 0)) {			StringBuilder paramStr = new StringBuilder();			for (String key : params.keySet())				if (paramStr.length() == 0)					paramStr.append(key);				else					paramStr.append("," + key);			__snippet = "{" + paramStr.toString() + "->" + snippet + "}";		} else			__snippet = "{->" + snippet + "}";		Closure<?> closure = (Closure<?>) snippetShell.evaluate(__snippet);		if (delegate != null)			closure.setDelegate(delegate);		Object result = null;		if ((params != null) && (params.size() > 0)) {			Object[] paramValues = new Object[params.size()];			int i = 0;			for (String key : params.keySet())				paramValues[i++] = params.get(key);			result = closure.call(paramValues);		} else			result = closure.call();		return result;	}}